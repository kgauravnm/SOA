from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# === Setup ===
driver_path = r"C:\Automation\driver\msedgedriver.exe"  # Adjust this if needed
portal_url = "https://your.portal.url"  # Change to actual URL
download_dir = r"C:\Your\Download\Path"  # Adjust download folder

options = Options()
prefs = {
    "download.default_directory": download_dir,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": True
}
options.add_experimental_option("prefs", prefs)
options.add_argument("--start-maximized")

driver = webdriver.Edge(service=Service(driver_path), options=options)
wait = WebDriverWait(driver, 20)
actions = ActionChains(driver)

# === Step 1: Open Portal and Login ===
driver.get(portal_url)
print("üîê Please complete SSO login... waiting 30 seconds")
time.sleep(30)

# === Step 2: Wait for AG-Grid rows to load ===
rows = wait.until(EC.presence_of_all_elements_located(
    (By.XPATH, "//div[@role='row' and contains(@class, 'ag-row')]")
))
print(f"‚úÖ Found {len(rows)} process rows")

# === Step 3: Debug and click each row safely ===
for i in range(min(6, len(rows))):
    print(f"\n‚û°Ô∏è Processing row {i+1}")
    
    # Re-fetch rows every time to avoid stale elements
    rows = driver.find_elements(By.XPATH, "//div[@role='row' and contains(@class, 'ag-row')]")
    row = rows[i]

    # Scroll into view
    driver.execute_script("arguments[0].scrollIntoView(true);", row)
    time.sleep(1)

    try:
        # Try printing all gridcell texts inside this row
        cells = row.find_elements(By.XPATH, ".//div[@role='gridcell']")
        print(f"  üîé Found {len(cells)} gridcells")

        for j, cell in enumerate(cells):
            print(f"     Cell {j+1}: '{cell.text}'")

        if len(cells) > 0:
            print("  üñ±Ô∏è Clicking on first cell...")
            cells[0].click()
            time.sleep(5)
        else:
            print("  ‚ö†Ô∏è No gridcells found to click.")

    except Exception as e:
        print(f"  ‚ùå Exception while accessing row {i+1}: {e}")
        continue

    # Optionally go back to the process list (if navigation happens)
    # driver.back()
    # time.sleep(5)

# === Done ===
print("\n‚úÖ Finished all rows.")
driver.quit()